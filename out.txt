
===== File: src/test/java/com/cap/dis/DisApplicationTests.java =====

package com.cap.dis;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class DisApplicationTests {

	@Test
	void contextLoads() {
	}

}

========================



===== File: src/main/java/com/cap/dis/config/KafkaProducerConfig.java =====

package com.cap.dis.config;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;

@Configuration
public class KafkaProducerConfig {

    @Value("${kafka.bootstrap-servers}")
    private String bootstrapServers;

    @Bean
    public ProducerFactory<String, String> producerFactory() {
        Map<String, Object> configProps = new HashMap<>();
        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        return new DefaultKafkaProducerFactory<>(configProps);
    }

    @Bean
    public KafkaTemplate<String, String> kafkaTemplate() {
        return new KafkaTemplate<>(producerFactory());
    }
}
========================



===== File: src/main/java/com/cap/dis/service/KafkaProducerService.java =====

package com.cap.dis.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

@Service
public class KafkaProducerService {

    @Autowired
    private KafkaTemplate<String, String> kafkaTemplate;

    private final String topic = "dis-pdus";

    public void sendMessage(String message) {
        kafkaTemplate.send(topic, message);
        System.out.println("Sent message to Kafka topic '" + topic + "': " + message);
    }
}
========================



===== File: src/main/java/com/cap/dis/service/UdpListenerService.java =====

package com.cap.dis.service;

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.nio.charset.StandardCharsets;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UdpListenerService {

    private static final int PORT = 3000;
    private static final int BUFFER_SIZE = 2048;

    @Autowired
    private KafkaProducerService kafkaProducerService;

    public void startListening() {
        try (DatagramSocket socket = new DatagramSocket(PORT)) {
            byte[] buffer = new byte[BUFFER_SIZE];
            System.out.println("UDP Listener started on port " + PORT);
            while (true) {
                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
                socket.receive(packet);
                String rawData = new String(packet.getData(), 0, packet.getLength(), StandardCharsets.UTF_8);
                
                // Simulate decoding the DIS PDU
                String decodedData = decodeDisPdu(rawData);
                
                // Publish the decoded data to Kafka
                kafkaProducerService.sendMessage(decodedData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String decodeDisPdu(String rawData) {
        // TODO: Replace with real decoding logic for DIS PDUs
        return "Decoded PDU: " + rawData;
    }
}
========================



===== File: src/main/java/com/cap/dis/DataIngestionApplication.java =====

package com.cap.dis;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import com.cap.dis.service.UdpListenerService;

@SpringBootApplication
public class DataIngestionApplication implements CommandLineRunner {

    @Autowired
    private UdpListenerService udpListenerService;

    public static void main(String[] args) {
        SpringApplication.run(DataIngestionApplication.class, args);
    }

    @Override
    public void run(String... args) throws Exception {
        // Start the UDP listener in a separate thread
        new Thread(() -> {
            udpListenerService.startListening();
        }).start();
    }
}
========================



===== File: src/main/resources/application.properties =====

spring.application.name=dis

# The port on which the Spring Boot app runs
server.port=8080

# Kafka bootstrap server configuration
kafka.bootstrap-servers=localhost:9092
========================


